so basically it is useless to convert it to when loading and i should only convert it to the os format when saving ?

GitHub Copilot
You've got a good insight there. The conversion strategy could be simplified.

Since QTextEdit normalizes everything to LF internally, your conversion when loading doesn't actually affect how the text is stored in memory or displayed. The real point where line ending format matters is when saving to a file.

Here's a more efficient approach:

When loading: Just load the file as-is, without conversion. QTextEdit will normalize it internally anyway.

When saving: Convert to the appropriate line endings for the current OS right before writing to the file.

This would simplify your code and avoid unnecessary conversions. Here's how your save function could look:

QObject::connect(&saveButton, &QPushButton::clicked, [&]() {
    QString fileName = QFileDialog::getSaveFileName(&window, "Save as", "C:/", "Text Files (*.txt)");
    if (!fileName.isEmpty()) {
        QFile file(fileName);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QString content = textEdit.toPlainText();
            
            // Convert to OS-appropriate line endings before saving
            if (ostype == 1) { // Windows
                // Ensure all line endings are CRLF
                content.replace("\r\n", "\n").replace("\r", "\n").replace("\n", "\r\n");
            } else { 
                // macOS or Linux - ensure all are LF
                content.replace("\r\n", "\n").replace("\r", "\n");
            }
            
            QTextStream out(&file);
            out << content;
            file.close();
        } else {
            QMessageBox::warning(&window, "Error", "Could not write to file.");
        }
    }
});

Your loading code could be simplified to:

QObject::connect(&loadButton, &QPushButton::clicked, [&]() {
    QString fileName = QFileDialog::getOpenFileName(&window, "Open File", "C:/", "Text Files (*.txt);;C++ files (*.cpp);;All Files (*)");
    if (!fileName.isEmpty()) {
        QFile file(fileName);
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            QString content = in.readAll();
            file.close();
            
            textEdit.setPlainText(content);  // QTextEdit handles normalization internally
            text_lines_characters(&textEdit);
        } else {
            QMessageBox::warning(&window, "Error", "Could not open file for reading.");
        }
    }
});

This approach is more efficient and follows the principle that the application should work with normalized data internally and only worry about specific formats when interfacing with external systems (like files).